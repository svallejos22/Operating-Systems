import re
import pandas as pd
import matplotlib.pyplot as plt
import subprocess
import os

# Parameters to process
parameter_sets = [
    {'N': 2, 'M': 7},
    {'N': 2, 'M': 9},
    {'N': 4, 'M': 7},
    {'N': 4, 'M': 9},
    {'N': 6, 'M': 7},
    {'N': 6, 'M': 9},
]

# Initialize a list to store summary data
summary_data = []

# Initialize data structures for plotting
rejection_data = {}
waiting_data = {}

# For plotting arrivals over time
arrivals_over_time = {}

for params in parameter_sets:
    N = params['N']
    M = params['M']
    key = f'N={N}_M={M}'

    print(f'Running simulation with N={N}, M={M}')

    # Remove previous simulation.txt if it exists
    if os.path.exists('simulation.txt'):
        os.remove('simulation.txt')

    # Construct the command
    cmd = ['./simulation', '-N', str(N), '-M', str(M)]

    # Run the simulation
    process = subprocess.run(cmd, capture_output=True, text=True)

    # Check if the simulation ran successfully
    if process.returncode != 0:
        print(f'Error running simulation with N={N}, M={M}')
        print(process.stderr)
        continue  # Skip to the next parameter set

    # Read the simulation.txt file generated by the simulation
    try:
        with open('simulation.txt', 'r') as file:
            lines = file.readlines()
    except FileNotFoundError:
        print(f'simulation.txt not found for N={N}, M={M}')
        continue  # Skip to the next parameter set

    # Initialize variables
    total_arrived = 0
    total_rejected = 0
    max_waiting_line = 0
    minute_arrivals = []
    minute_rejections = []
    minute_waiting_line = []

    # Process each line
    for line in lines:
        # Match arrival lines
        arrival_match = re.match(r'(\d+)\s+arrive\s+(\d+)\s+reject\s+(\d+)\s+wait-line\s+(\d+)', line)
        # Match car loading lines
        car_match = re.match(r'Car\s+\d+:\s+Loaded=(\d+),\s+Remaining Waiting=(\d+)', line)

        if arrival_match:
            minute = int(arrival_match.group(1))
            arrivals = int(arrival_match.group(2))
            rejections = int(arrival_match.group(3))
            waiting_line = int(arrival_match.group(4))

            total_arrived += arrivals
            total_rejected += rejections
            if waiting_line > max_waiting_line:
                max_waiting_line = waiting_line

            minute_arrivals.append(arrivals)
            minute_rejections.append(rejections)
            minute_waiting_line.append(waiting_line)

    # Calculate rejection ratio
    rejection_ratio = total_rejected / total_arrived if total_arrived > 0 else 0

    # Since we cannot calculate average wait time without individual wait times, we'll set it to None
    average_wait_time = None  # Or 0, if you prefer

    # Append to summary data
    summary_data.append({
        'N': N,
        'M': M,
        'Total Arrivals': total_arrived,
        'Total Rejections': total_rejected,
        'Rejection Ratio': rejection_ratio,
        'Average Wait Time (mins)': average_wait_time,
        'Max Waiting Line': max_waiting_line
    })

    # For plotting
    rejection_data[key] = minute_rejections
    waiting_data[key] = minute_waiting_line
    arrivals_over_time[key] = minute_arrivals

# Create a DataFrame for the summary table
summary_df = pd.DataFrame(summary_data)

# Display the summary table
print(summary_df)

# Save the summary table to a CSV file
summary_df.to_csv('simulation_summary.csv', index=False)

# Plotting
# 1. Number of persons arrived in every minute (one curve per parameter set)
plt.figure(figsize=(12, 8))
for key, arrivals in arrivals_over_time.items():
    plt.plot(arrivals, label=key)
plt.xlabel('Minute')
plt.ylabel('Number of Arrivals')
plt.title('Number of Persons Arrived in Every Minute')
plt.legend()
plt.grid(True)
plt.savefig('arrivals_per_minute.png')
plt.close()

# 2. Number of persons rejected in every minute (three curves)
plt.figure(figsize=(12, 8))
for key, rejections in rejection_data.items():
    plt.plot(rejections, label=key)
plt.xlabel('Minute')
plt.ylabel('Number of Rejections')
plt.title('Number of Persons Rejected in Every Minute')
plt.legend()
plt.grid(True)
plt.savefig('rejections_per_minute.png')
plt.close()

# 3. Number of persons waiting in every minute (three curves)
plt.figure(figsize=(12, 8))
for key, waiting in waiting_data.items():
    plt.plot(waiting, label=key)
plt.xlabel('Minute')
plt.ylabel('Number of Persons Waiting')
plt.title('Number of Persons Waiting in Every Minute')
plt.legend()
plt.grid(True)
plt.savefig('waiting_line_per_minute.png')
plt.close()
